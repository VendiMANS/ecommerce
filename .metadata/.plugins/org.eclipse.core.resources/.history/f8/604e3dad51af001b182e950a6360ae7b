package com.springboot.app.products.model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class ProductTest {

	@Test
	void testGetId() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertEquals(null, fullProd.getId());
	}

	@Test
	void testSetId() {
		Product emptyProd = new Product();
		
		assertEquals(null, emptyProd.getId());
		
		emptyProd.setId(1L);
		
		assertEquals(1L, emptyProd.getId());
	}

	@Test
	void testGetName() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertEquals("A", fullProd.getName());
	}

	@Test
	void testSetName() {
		Product emptyProd = new Product();
		
		assertEquals(null, emptyProd.getName());
		
		emptyProd.setName("BBB");
		
		assertEquals("BBB", emptyProd.getName());
	}

	@Test
	void testGetPrice() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertEquals(1.0, fullProd.getPrice());
	}

	@Test
	void testSetPrice() {
		Product emptyProd = new Product();
		
		assertEquals(null, emptyProd.getPrice());
		
		emptyProd.setPrice(66.0);
		
		assertEquals(66.0, emptyProd.getPrice());
	}

	@Test
	void testGetStock() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertEquals(2, fullProd.getStock());
	}

	@Test
	void testSetStock() {
		Product emptyProd = new Product();
		
		assertEquals(null, emptyProd.getStock());
		
		emptyProd.setStock(5);
		
		assertEquals(5, emptyProd.getStock());
	}

	@Test
	void testGetOnSale() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertEquals(false, fullProd.getOnSale());
	}

	@Test
	void testSetOnSale() {
		Product emptyProd = new Product();
		
		assertEquals(null, emptyProd.getOnSale());
		
		emptyProd.setOnSale(true);
		
		assertEquals(true, emptyProd.getOnSale());
	}

	@Test
	void testHasEnoughStockToSell() {
		Product fullProd = new Product("A", 1.0, 2, false);
		
		assertFalse(fullProd.hasEnoughStockToSell(50));
		
		fullProd.setStock(51);
		
		assertTrue(fullProd.hasEnoughStockToSell(50));
	}

	@Test
	void testEqualsObject() {
		Product emptyProd = new Product();
		Product fullProd = new Product("A", 1.0, 2, false);
		fullProd.setId(1L);

        assertEquals(emptyProd,emptyProd);
        assertNotEquals(emptyProd,null);
        assertNotEquals(emptyProd,27);
        
		assertNotEquals(emptyProd,fullProd);
		fullProd.setId(null);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setId(1L);
		emptyProd.setId(2L);
		assertNotEquals(emptyProd,fullProd);
		
		emptyProd.setId(1L);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setName(null);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setName("A");
		emptyProd.setName("B");
		assertNotEquals(emptyProd,fullProd);
		
		emptyProd.setName("A");
		assertNotEquals(emptyProd,fullProd);
		fullProd.setOnSale(null);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setOnSale(false);
		emptyProd.setOnSale(true);
		assertNotEquals(emptyProd,fullProd);
		
		emptyProd.setOnSale(false);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setPrice(null);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setPrice(1.0);
		emptyProd.setPrice(1.1);
		assertNotEquals(emptyProd,fullProd);
		
		emptyProd.setPrice(1.0);
		assertNotEquals(emptyProd,fullProd);
		fullProd.setStock(null);
		assertEquals(emptyProd,fullProd);
		fullProd.setStock(2);
		emptyProd.setStock(22);
		assertNotEquals(emptyProd,fullProd);
		
		emptyProd.setStock(2);
		assertEquals(emptyProd,fullProd);
		
		
        
	}

	@Test
	void testHashCode() {
		Product emptyProd = new Product();
		Product fullProd = new Product("A", 1.0, 2, false);
		fullProd.setId(1L);
		
        assertNotEquals(emptyProd.hashCode(),fullProd.hashCode());
	}
	
	@Test
	void testToString() {
		fail("Not yet implemented");
	}

}
