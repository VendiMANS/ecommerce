package com.springboot.app.products.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.springboot.app.products.model.Product;
import com.springboot.app.products.repository.IProductRepository;

@Service
public class ProductService implements IProductService {

	@Autowired
	private IProductRepository repository;
	
	@Override
	@Transactional
	public Product save(Product product) {
		return repository.save(product);
	}
	
	@Override
	@Transactional
	public List<Product> saveAll(List<Product> products) {
		List<Product> listToSave = new ArrayList<>();
		for(Product product : products) {
			if(repository.findByName(product.getName()) != null) {
				listToSave.add(product);
			}
		}
		return repository.saveAll(listToSave);
	}
	
	
	
	
	
	@Override
	@Transactional(readOnly = true)
	public Product findById(Long id) {
		return repository.findById(id).orElse(null);
	}
	
	@Override
	@Transactional(readOnly = true)
	public Product findByName(String name) {
		/*
		Optional<Product> res = repository.findByName(name);
		if(res.isEmpty()) {
			return null;
		}
		return res.get();
		*/
		return repository.findByName(name).orElse(null);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Product> findAll() {
		return (List<Product>) repository.findAll();
	}
	
	@Override
	@Transactional(readOnly = true)
	public List<Product> findOffers() {
		return ((List<Product>) repository.findAll()).stream()
				.filter(p -> p.getOnSale())
				.collect(Collectors.toList());
	}
	
	
	
	
	
	@Override
	@Transactional
	public Product edit(Product product, Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null) {
			productInDB.setName(product.getName());
			productInDB.setPrice(product.getPrice());
			productInDB.setStock(product.getStock());
			productInDB.setOnSale(product.getOnSale());
			return repository.save(productInDB);
		}
		return null;
	}
	
	@Override
	@Transactional
	public Product editPrice(Double price, Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null) {
			productInDB.setPrice(price);
			return repository.save(productInDB);
		}
		return null;
	}
	
	@Override
	@Transactional
	public List<Product> editPriceMap(Map<Long, Double> idAndPrices) {
		List<Product> editedProducts = new ArrayList<>();
		for(Long id : idAndPrices.keySet()) {
			Product productInDB = repository.findById(id).orElse(null);
			if(productInDB != null) {
				productInDB.setPrice(idAndPrices.get(id));
				editedProducts.add(productInDB);
			}
		}
		return repository.saveAll(editedProducts);
	}
	
	@Override
	@Transactional
	public Product removeOnSale(Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null) {
			productInDB.setOnSale(false);
			return repository.save(productInDB);
		}
		return null;
	}
	
	@Override
	@Transactional
	public List<Product> removeOnSaleList(List<Long> ids) {
		List<Product> onSaleList = new ArrayList<>();
		for(Long id : ids) {
			Product productInDB = repository.findById(id).orElse(null);
			if(productInDB != null) {
				productInDB.setOnSale(false);
				onSaleList.add(productInDB);
			}
		}
		return repository.saveAll(onSaleList); 
	}
	
	@Override
	@Transactional
	public Product putOnSale(Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null) {
			productInDB.setOnSale(true);
			return repository.save(productInDB);
		}
		return null;
	}
	
	@Override
	@Transactional
	public List<Product> putOnSaleList(List<Long> ids) {
		List<Product> onSaleList = new ArrayList<>();
		for(Long id : ids) {
			Product productInDB = repository.findById(id).orElse(null);
			if(productInDB != null) {
				productInDB.setOnSale(true);
				onSaleList.add(productInDB);
			}
		}
		return repository.saveAll(onSaleList); 
	}
	
	@Override
	@Transactional
	public Product addStock(Integer stock, Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null) {
			productInDB.setStock(productInDB.getStock() + stock);
			return repository.save(productInDB);
		}
		return null;
	}

	@Override
	@Transactional
	public List<Product> addStockMap(Map<Long, Integer> idAndStocks) {
		List<Product> editedProducts = new ArrayList<>();
		for(Long id : idAndStocks.keySet()) {
			Product productInDB = repository.findById(id).orElse(null);
			if(productInDB != null) {
				productInDB.setStock( productInDB.getStock() + idAndStocks.get(id) );
				editedProducts.add(productInDB);
			}
		}
		return repository.saveAll(editedProducts);
	}
	
	@Override
	@Transactional
	public Product sellStock(Integer stock, Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null && productInDB.hasEnoughStockToSell(stock)) {
			productInDB.setStock(productInDB.getStock() - stock);
			return repository.save(productInDB);
		}
		return null;
	}
	
	/*@Override
	@Transactional
	public Sale sell(Integer stockToSell, Long id) {
		Product productInDB = repository.findById(id).orElse(null);
		if(productInDB != null && hasEnoughStock(productInDB, stockToSell)) {
			productInDB.setStock(productInDB.getStock() - stockToSell);
			repository.save(productInDB);
			Sale sale = new Sale(productInDB.getName(),stockToSell);
			return sale;
		} 
		return null;
	}

	@Override
	@Transactional
	public List<Sale> sellMap(Map<Long, Integer> idAndStocks) {
		List<Sale> sales = new ArrayList<>();
		for(Long id : idAndStocks.keySet()) {
			Product productInDB = repository.findById(id).orElse(null);
			if(productInDB != null) {
				Integer stockToSell = idAndStocks.get(id);
				if(hasEnoughStock(productInDB, stockToSell)) {
					productInDB.setStock(productInDB.getStock() - stockToSell);
					repository.save(productInDB);
					Sale sale = new Sale(productInDB.getName(), stockToSell);
					sales.add(sale);
				}
			}
		}
		return sales;
	}*/
	
	
	
	
	
	@Override
	@Transactional
	public void deleteById(Long id) {
		repository.deleteById(id);
	}

	@Override
	@Transactional
	public void deleteAll() {
		repository.deleteAll();
	}
	
}
